{
  "supportWebp": true,
  "isLoadingAsyncComponent": false,
  "itemsPerPage": 10,
  "totalPage": 6,
  "items": [
    {
    "title": "rocket.cat 集成问题",
    "summary": "<p>最近接触到 <a href=\"https://rocket.chat/\">rocket.chat</a>，因为一些原因写了一些集成，发现 rocket.chat 居然是用 nodejs 的 vm 模块来跑的集成代码。这下好办了，由于 rocket.chat 并不支持一个 webhook 发往多个频道和多个接收人，这个对我来说有点烦，毕竟 rocket.chat 的集成得管理员手动一个一个加</p>\n",
    "updatedAt": "2018-04-28 23:00:34",
    "createdAt": "2018-04-28 22:43:52",
    "pathName": "nodejs-vm-escape"
  }, {
    "title": "关于 Go 的集成测试",
    "summary": "<blockquote>\n<p>好久没写博客了，不是我懒，是工作确实逐渐忙起来了。近来稍微闲了一些，又陆续学一些新东西，因此会逐渐总结记录一些新的博文</p>\n</blockquote>\n",
    "updatedAt": "2018-04-30 14:01:24",
    "createdAt": "2018-04-28 21:24:17",
    "pathName": "something-about-go-intergration-test"
  }, {
    "title": "Grafana 的一些使用技巧",
    "summary": "<p> grafana 是一个开源的时序性统计和监控平台，支持例如 elasticsearch、graphite、influxdb 等众多的数据源，并以功能强大的界面编辑器著称。我们在前端监控方面引入 grafana 后取得了一些不错的反馈，但是很多用户由于之前没有接触过 grafana 经常会来询问 grafana 的相关问题，因此希望本文对大家在 grafana 使用方面有所帮助。</p>\n<p>grafana 的权限分为三个等级：Viewer、Editor 和 Admin，Viewer 只能查看 grafana 已经存在的面板而不能编辑，Editor 可以编辑面板，Admin 则拥有全部权限例如添加数据源、添加插件、增加 API KEY。</p>\n<p>对于普通用户来说，Viewer 权限已经足够，本文接下来的内容主要和 Editor 权限有关。由于篇幅有限，本文作为范例的数据源为 graphite，同时也只介绍最常用的 Graph 图表的配置方法。</p>\n",
    "updatedAt": "2018-03-05 19:02:38",
    "createdAt": "2018-02-25 14:18:26",
    "pathName": "grafana-skill-basic"
  }, {
    "title": "Headless Chrome目前的一些问题",
    "summary": "<p>最近在工作中使用headless chrome写了不少东西，本文吐槽一下它目前存在的一些问题。</p>\n",
    "updatedAt": "2017-10-02 19:37:09",
    "createdAt": "2017-09-19 23:28:57",
    "pathName": "something-about-headless-chrome"
  }, {
    "title": "React Native的异步",
    "summary": "<p>RN的JSBridge是一个完成度相当高的东西。它带来了开发速度的巨大提升，相应地也导致了运行原生代码时总是异步的这一特征，本文讨论一下RN中异步的一些场景和异步带来的一些问题。</p>\n",
    "updatedAt": "2017-10-02 19:37:26",
    "createdAt": "2017-09-12 11:33:21",
    "pathName": "react-native-async"
  }, {
    "title": "Mac外接键盘利器: karabiner-elements",
    "summary": "<blockquote>\n<p>用尽力气在钢板上砸出一个微小的弧度，才能打出一个字符</p>\n</blockquote>\n<p>最近实在是受不了2017版mbp的钢板键盘了，把大学用了四年的茶轴搬来工位，正式开始了外接键盘的生涯。</p>\n",
    "updatedAt": "2017-10-02 19:37:31",
    "createdAt": "2017-09-12 11:32:33",
    "pathName": "mac-karabiner-elements-for-keyborad"
  }, {
    "title": "Android N: 修复7.1.1下NestedScrollView滑动失灵的问题 ",
    "summary": "<p>安卓7.1.1下，NestedScrollView有一个滑动失灵的bug，具体动图可以戳安卓开发团队成员的<a href=\"https://chris.banes.me/2017/06/09/carry-on-scrolling/\">这篇博文</a></p>\n",
    "updatedAt": "2017-10-02 19:37:38",
    "createdAt": "2017-09-09 19:19:27",
    "pathName": "android-7.1-nested-scrollview-fling"
  }, {
    "title": "React Native：HTML转View漫谈",
    "summary": "<p>RN解决了安卓和IOS之间一部分的复用问题，但官方一点也没有提及到复用WEB端的HTML，即通常所说的HTML转View（View是RN的基本视图单位，类比于HTML的div）。本文介绍一下博主在RN复用HTML这方面的探索。</p>\n",
    "updatedAt": "2017-10-02 19:48:28",
    "createdAt": "2017-09-09 15:24:43",
    "pathName": "react-native-html-to-view"
  }, {
    "title": "React Native: 缓存iOS图片",
    "summary": "<blockquote>\n<p>相较于Android和iOS， React Native只能说属于玩票性质</p>\n</blockquote>\n<p>使用React Native写iOS时，很容易发现iOS上的很多图片并没有缓存，并且经常会出现一些图片无法显示的问题。对于一个正常的移动App来说，这是一个致命的问题。本文介绍一下如何解决它</p>\n",
    "updatedAt": "2017-10-02 19:37:55",
    "createdAt": "2017-09-09 13:57:09",
    "pathName": "react-native-ios-cached-image"
  }, {
    "title": "React Native: 安卓控件的iOS兼容（其二）",
    "summary": "",
    "updatedAt": "2017-10-02 19:38:01",
    "createdAt": "2017-09-09 13:56:17",
    "pathName": "react-native-android-control-to-ios-2"
  },
  {
    "title": "React Native：安卓控件的iOS兼容（其一）",
    "summary": "<p>RN在控件的跨平台上做的并不好。在v0.30之后，RN不再有原生控件加入，甚至于在几个版本中删除了平台独占的数个控件。本系列记录一下博主在iOS上兼容安卓控件的一些办法。</p>\n",
    "updatedAt": "2017-10-02 19:38:05",
    "createdAt": "2017-09-09 13:55:23",
    "pathName": "react-native-android-control-to-ios-1"
}, {
    "title": "React Native路由: 页面间的触摸穿透特效",
    "summary": "<p>在我写的<a href=\"https://github.com/smallpath/psnine\">PSNINE</a>中，回复页面有一个很好玩的特效：</p>\n<p><img src=\"https://oebegwmfv.qnssl.com/20170725/142342_ezgif.com-resize%2520%281%29.gif\" alt=\"\"></p>\n<p>本文介绍一下如何配合react-navigation做出同样的效果</p>\n",
    "updatedAt": "2017-10-02 19:38:12",
    "createdAt": "2017-09-09 13:48:10",
    "pathName": "react-native-touch-through-effect"
}, {
    "title": "Java: Spark Streaming实时计算",
    "summary": "<p>最近用Spark Streaming写了一个实时计算的模块，本文记录一下一些东西。</p>\n",
    "updatedAt": "2017-10-02 19:38:20",
    "createdAt": "2017-09-09 13:35:48",
    "pathName": "java-spark-streaming"
}, {
    "title": "Node: 善用require优化集成测试",
    "summary": "<blockquote>\n<p>单元测试测函数，集成测试测模块</p>\n</blockquote>\n",
    "updatedAt": "2017-10-02 19:38:30",
    "createdAt": "2017-09-09 12:50:12",
    "pathName": "node-require-intergration-test"
}, {
    "title": "React Native的调试",
    "summary": "<p>本文记录一下RN调试的相关东西。</p>\n",
    "updatedAt": "2017-10-02 19:40:38",
    "createdAt": "2017-09-08 21:46:39",
    "pathName": "react-native-debug"
}, {
    "title": "React Native的路由演进",
    "summary": "",
    "updatedAt": "2017-10-02 19:41:03",
    "createdAt": "2017-09-08 20:37:08",
    "pathName": "react-native-router"
}, {
    "title": "React Native小贴士",
    "summary": "",
    "updatedAt": "2017-08-06 14:52:18",
    "createdAt": "2017-07-23 23:49:52",
    "pathName": "react-native-tips"
}, {
    "title": "Sp_memory v3.1更新日志",
    "summary": "<p>这里是Sp_memory v3.1的更新日志, 图片太多放贴吧会被和谐, 因此就单独列一篇博文了.</p>\n<p>(之后会搬运一些我以前在贴吧里发的精品贴到博客里, 毕竟他们也能算技术文章)</p>\n",
    "updatedAt": "2017-06-22 14:07:12",
    "createdAt": "2017-06-20 13:47:47",
    "pathName": "ae-scripting-memory-v3.1"
}, {
    "title": "基于React Native的Psnine第三方客户端",
    "summary": "<p><img style=\"border:0\" height=\"192\" src=\"https://oebegwmfv.qnssl.com/webp/20170618/150040_ic_launcher%2520.png\"></p>\n",
    "updatedAt": "2017-09-09 22:27:45",
    "createdAt": "2017-06-20 13:35:49",
    "pathName": "psnine"
}, {
    "title": "ExtendScript闲谈",
    "summary": "<p>ExtendScript是Adobe基于1999年的ecma262标准（即通常所说的es3）实现的一门类似javascript的脚本语言，被用来操作Adobe系列十几款软件。</p>\n<p>读者先不要鄙视它古老的年代，这里可以先说一件事：ExtendScript的默认脚本文件后缀为<strong>jsx</strong>。是的，你没看错，就是react一直用的那个jsx，并且ExtendScript的脚本引擎直接支持jsx语法</p>\n<pre class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeXML</span> (<span class=\"hljs-params\">first, last</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">person</span> <span class=\"hljs-attr\">first</span>=<span class=\"hljs-string\">{first}</span> <span class=\"hljs-attr\">last</span>=<span class=\"hljs-string\">{last}</span>&gt;</span>{first + \" \" + last}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">person</span>&gt;</span></span>;\n}\n\nmakeXML(<span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-string\">'Doe'</span>).toXMLString()  <span class=\"hljs-comment\">// return &lt;person first=\"Jane\" last=\"Doe\"&gt;Jane Doe&lt;/person&gt;</span>\n</code></pre>\n",
    "updatedAt": "2017-07-14 13:32:24",
    "createdAt": "2017-03-30 00:55:36",
    "pathName": "extend-script-the-good-part"
}
],
  "archives": {
    "2018年04月": [{
      "title": "rocket.cat 集成问题",
      "createdAt": "2018-04-28 22:43:52",
      "pathName": "nodejs-vm-escape"
    }, {
      "title": "关于 Go 的集成测试",
      "createdAt": "2018-04-28 21:24:17",
      "pathName": "something-about-go-intergration-test"
    }],
    "2018年02月": [{
      "title": "Grafana 的一些使用技巧",
      "createdAt": "2018-02-25 14:18:26",
      "pathName": "grafana-skill-basic"
    }],
    "2017年09月": [{
      "title": "Headless Chrome目前的一些问题",
      "createdAt": "2017-09-19 23:28:57",
      "pathName": "something-about-headless-chrome"
    }, {
      "title": "React Native的异步",
      "createdAt": "2017-09-12 11:33:21",
      "pathName": "react-native-async"
    }, {
      "title": "Mac外接键盘利器: karabiner-elements",
      "createdAt": "2017-09-12 11:32:33",
      "pathName": "mac-karabiner-elements-for-keyborad"
    }, {
      "title": "Android N: 修复7.1.1下NestedScrollView滑动失灵的问题 ",
      "createdAt": "2017-09-09 19:19:27",
      "pathName": "android-7.1-nested-scrollview-fling"
    }, {
      "title": "React Native：HTML转View漫谈",
      "createdAt": "2017-09-09 15:24:43",
      "pathName": "react-native-html-to-view"
    }, {
      "title": "React Native: 缓存iOS图片",
      "createdAt": "2017-09-09 13:57:09",
      "pathName": "react-native-ios-cached-image"
    }, {
      "title": "React Native: 安卓控件的iOS兼容（其二）",
      "createdAt": "2017-09-09 13:56:17",
      "pathName": "react-native-android-control-to-ios-2"
    }, {
      "title": "React Native：安卓控件的iOS兼容（其一）",
      "createdAt": "2017-09-09 13:55:23",
      "pathName": "react-native-android-control-to-ios-1"
    }, {
      "title": "React Native路由: 页面间的触摸穿透特效",
      "createdAt": "2017-09-09 13:48:10",
      "pathName": "react-native-touch-through-effect"
    }, {
      "title": "Java: Spark Streaming实时计算",
      "createdAt": "2017-09-09 13:35:48",
      "pathName": "java-spark-streaming"
    }, {
      "title": "Node: 善用require优化集成测试",
      "createdAt": "2017-09-09 12:50:12",
      "pathName": "node-require-intergration-test"
    }, {
      "title": "React Native的调试",
      "createdAt": "2017-09-08 21:46:39",
      "pathName": "react-native-debug"
    }, {
      "title": "React Native的路由演进",
      "createdAt": "2017-09-08 20:37:08",
      "pathName": "react-native-router"
    }],
    "2017年07月": [{
      "title": "React Native小贴士",
      "createdAt": "2017-07-23 23:49:52",
      "pathName": "react-native-tips"
    }],
    "2017年06月": [{
      "title": "Sp_memory v3.1更新日志",
      "createdAt": "2017-06-20 13:47:47",
      "pathName": "ae-scripting-memory-v3.1"
    }, {
      "title": "基于React Native的Psnine第三方客户端",
      "createdAt": "2017-06-20 13:35:49",
      "pathName": "psnine"
    }],
    "2017年03月": [{
      "title": "ExtendScript闲谈",
      "createdAt": "2017-03-30 00:55:36",
      "pathName": "extend-script-the-good-part"
    }, {
      "title": "webpack自定义分块名称",
      "createdAt": "2017-03-28 01:18:09",
      "pathName": "webpack-on-demand-chunk-name"
    }, {
      "title": "vue2服务端渲染：直连数据库的首屏优化策略",
      "createdAt": "2017-03-05 21:39:10",
      "pathName": "vue2-ssr-connect-db"
    }, {
      "title": "博客优化点：轮子之心",
      "createdAt": "2017-03-04 21:47:04",
      "pathName": "blog-vuex-wheel"
    }],
    "2017年02月": [{
      "title": "Github笔记",
      "createdAt": "2017-02-25 15:46:41",
      "pathName": "github-notes"
    }, {
      "title": "service worker初探：超级拦截器与预缓存",
      "createdAt": "2017-02-04 18:16:00",
      "pathName": "service-worker-precache"
    }, {
      "title": "vue2服务端渲染：按需分块加载的首屏优化策略",
      "createdAt": "2017-02-04 11:34:28",
      "pathName": "vue2-ssr-on-demand-code-splitting-opti"
    }, {
      "title": "二月随手记",
      "createdAt": "2017-02-04 11:33:18",
      "pathName": "2017-02-cut-hand"
    }],
    "2017年01月": [{
      "title": "NPM包管理的一点思考",
      "createdAt": "2017-01-14 22:42:59",
      "pathName": "npm-dependency-version-control"
    }, {
      "title": "单页应用：服务端谷歌统计",
      "createdAt": "2017-01-03 23:02:09",
      "pathName": "spa-server-side-goolge-analyse"
    }, {
      "title": "Vue2+SSR：快速定制邮件模板",
      "createdAt": "2017-01-01 12:27:17",
      "pathName": "vue2-ssr-email-template"
    }],
    "2016年12月": [{
      "title": "十二月随手记",
      "createdAt": "2016-12-04 22:19:00",
      "pathName": "cut-2016-hand-12"
    }, {
      "title": "博客后台已升级至v2版",
      "createdAt": "2016-12-03 12:28:56",
      "pathName": "blog-back-v2"
    }, {
      "title": "vue2：数据获取的一点思考",
      "createdAt": "2016-12-02 21:41:21",
      "pathName": "vue2-before-guards"
    }, {
      "title": "七牛云图片上传：使用element-ui的upload组件",
      "createdAt": "2016-12-01 21:09:18",
      "pathName": "element-upload-qiniu"
    }],
    "2016年11月": [{
      "title": "[性能优化实践] 单页应用",
      "createdAt": "2016-11-17 11:16:09",
      "pathName": "spa-opti"
    }, {
      "title": "十一月随手记",
      "createdAt": "2016-11-15 17:38:08",
      "pathName": "cut-my-hand"
    }, {
      "title": "Think.js与Vue2服务端渲染",
      "createdAt": "2016-11-07 13:12:20",
      "pathName": "thinkjs-ssr"
    }, {
      "title": "Vue2服务端渲染: 踩坑合集",
      "createdAt": "2016-11-03 18:31:15",
      "pathName": "vue2-ssr-hardcore"
    }],
    "2016年10月": [{
      "title": "Vue2.0服务端渲染: 博客前台升级记录",
      "createdAt": "2016-10-27 21:49:21",
      "pathName": "vue-ssr-log"
    }, {
      "title": "从Vue 1.0到Vue 2.0: 博客升级记录",
      "createdAt": "2016-10-20 13:51:24",
      "pathName": "vue-upgrade-2"
    }, {
      "title": "博客已升级至 Vue 1.0 + Koa 2",
      "createdAt": "2016-10-06 22:51:56",
      "pathName": "blog-first-upgrade"
    }, {
      "title": "[性能优化实践] React Native",
      "createdAt": "2016-10-01 14:55:19",
      "pathName": "react-native-opti"
    }],
    "2016年09月": [{
      "title": "React Native:踩坑合集",
      "createdAt": "2016-09-28 17:03:51",
      "pathName": "react-native-bugfix"
    }, {
      "title": "Node.js: 慎用express的res.status()和原生res.statusCode",
      "createdAt": "2016-09-21 20:49:14",
      "pathName": "express-req-status"
    }, {
      "title": "Node.js: 让express 4.X 解析任意请求",
      "createdAt": "2016-09-15 20:30:26",
      "pathName": "express-parser-raw"
    }, {
      "title": "Node.js: 让express 4.X 解析xml请求",
      "createdAt": "2016-09-12 21:28:13",
      "pathName": "express-body-parser-xml"
    }],
    "2016年08月": [{
      "title": "Node.js: 不支持自定义HTTP Verb",
      "createdAt": "2016-08-24 20:09:53",
      "pathName": "node-http-verb"
    }, {
      "title": "Babel踩坑日记",
      "createdAt": "2016-08-17 22:57:57",
      "pathName": "babel-boom-1"
    }, {
      "title": "你所不知道的AE技巧-脚本篇",
      "createdAt": "2016-08-12 20:47:46",
      "pathName": "ae-skill-script"
    }, {
      "title": "你所不知道的AE技巧-表达式篇",
      "createdAt": "2016-08-03 20:47:27",
      "pathName": "ae-skill-expression"
    }],
    "2016年07月": [{
      "title": "你所不知道的AE技巧-本篇",
      "createdAt": "2016-07-16 20:46:46",
      "pathName": "ae-base"
    }, {
      "title": "Node.js:使用hook+shell+git进行自动化构建",
      "createdAt": "2016-07-13 00:00:00",
      "pathName": "Node.js:使用git和webhook进行自动化构建"
    }, {
      "title": "Javascript:一次prototype的实践",
      "createdAt": "2016-07-06 00:00:00",
      "pathName": "Javascript:一次prototype的实践"
    }, {
      "title": "使用mocha对用Babel编译的代码进行单元测试",
      "createdAt": "2016-07-04 00:00:00",
      "pathName": "使用mocha测试ES6代码"
    }],
    "2016年05月": [{
      "title": "正则表达式利器:JSVerbalExpressions解析与使用",
      "createdAt": "2016-05-20 19:49:30",
      "pathName": "正则表达式利器:JSVerbalExpressions"
    }, {
      "title": "AE静止系技巧:背景发光",
      "createdAt": "2016-05-20 17:58:40",
      "pathName": "AE静止系绝技:可移动的日光束"
    }, {
      "title": "Adobe Kuler的色盘算法",
      "createdAt": "2016-05-18 00:00:00",
      "pathName": "Adobe Kuler的色盘算法"
    }, {
      "title": "AE中两种彩色线稿的内置插件做法",
      "createdAt": "2016-05-04 00:00:00",
      "pathName": "ae-color-comic"
    }]
  },
  "blog": {
    "_id": "5ae488a841007812df1c04f1",
    "title": "rocket.cat 集成问题",
    "category": "Node.js",
    "content": "<p>最近接触到 <a href=\"https://rocket.chat/\">rocket.chat</a>，因为一些原因写了一些集成，发现 rocket.chat 居然是用 nodejs 的 vm 模块来跑的集成代码。这下好办了，由于 rocket.chat 并不支持一个 webhook 发往多个频道和多个接收人，这个对我来说有点烦，毕竟 rocket.chat 的集成得管理员手动一个一个加</p>\n<h2><a href='#逃逸-vm' id='逃逸-vm' class='anchor'></a><a href='#逃逸-vm'>逃逸 vm</a></h2><p>我们都知道 vm 有问题，可以通过 this.constructor直接逃逸 vm 环境，执行任意代码，rocket.chat 也不例外，虽然它并不是直接跑而是 compile 绕了一圈，但是结果还是逃不出攻击的问题:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> Script = this.<span class=\"hljs-keyword\">constructor</span>.<span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span><span class=\"hljs-params\">(`\n  return <span class=\"hljs-comment\">{\n     process_incoming_request({ request }</span>)</span> <span class=\"hljs-comment\">{\n      // do what the fuck you want to do\n     }</span>\n  }\n`)\n\n如果代码中也想用反引号，可以在 <span class=\"hljs-title\">babel</span> 官网自己转一下</span>\n</code></pre><h2><a href='#发往多个接收人' id='发往多个接收人' class='anchor'></a><a href='#发往多个接收人'>发往多个接收人</a></h2><p>翻了翻 rocket.chat 的代码，emmmmm，实在是写得太烂了，没用 ts 倒还好说，测试够也没啥，关键是用 meteor 框架导致无意义的全局变量到处都是，发消息的函数就是这样一个全局变量，贼搞笑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-regexp\">//</span> https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/RocketChat/</span>Rocket.Chat<span class=\"hljs-regexp\">/blob/</span><span class=\"hljs-number\">537553609613581</span>f95ba3d4590a1b0b2a4c12c4e<span class=\"hljs-regexp\">/packages/</span>rocketchat-integrations<span class=\"hljs-regexp\">/server/</span>processWebhookMessage.js\nprocessWebhookMessage(content, user, defaults)\n</code></pre><p>传啥上面的源代码里都有了</p>\n<h2><a href='#其他' id='其他' class='anchor'></a><a href='#其他'>其他</a></h2><p>rocket.chat 现在有两千个 issue，说明替代 slack 的方案还是挺受欢迎的？毕竟 slack 大规模用还是涉及到收费的问题</p>\n",
    "tags": [],
    "updatedAt": "2018-04-28 23:00:34",
    "createdAt": "2018-04-28 22:43:52",
    "allowComment": true,
    "toc": "<p><strong>文章目录</strong></p>\n<ul>\n<li><a href=\"#逃逸-vm\">逃逸 vm</a></li>\n<li><a href=\"#发往多个接收人\">发往多个接收人</a></li>\n<li><a href=\"#其他\">其他</a></li>\n</ul>\n",
    "pathName": "nodejs-vm-escape"
  },
  "prev": {
    "title": "关于 Go 的集成测试",
    "pathName": "something-about-go-intergration-test",
    "type": "post"
  },
  "next": {},
  "page": {
    "_id": "5976eaf87c017943b085f70f",
    "title": "开源",
    "content": "<h2><a href='#本博客---blog' id='本博客---blog' class='anchor'></a><a href='#本博客---blog'>本博客 - blog</a></h2><p>前后端分离+服务端渲染的博客系统. 基于Vue2、Koa2、MongoDB、Redis。</p>\n<p>Github: <a href=\"https://github.com/smallpath/blog\">https://github.com/smallpath/blog</a></p>\n<p>采用了如下各种手段进行优化：  </p>\n<ul>\n<li><a href=\"https://smallpath.me/post/vue2-ssr-on-demand-code-splitting-opti\">按需分块加载的首屏优化策略</a>  </li>\n<li><a href=\"https://smallpath.me/post/service-worker-precache\">使用service worker强缓存路由组件</a>  </li>\n<li><a href=\"https://smallpath.me/post/vue2-ssr-connect-db\">直连数据库</a></li>\n<li><a href=\"https://smallpath.me/post/spa-server-side-goolge-analyse\">服务端谷歌统计</a></li>\n<li><a href=\"https://smallpath.me/post/blog-vuex-wheel\">自造状态库和Ajax库</a></li>\n</ul>\n<p>也做了一些细节的优化：</p>\n<ul>\n<li>支持offline访问</li>\n<li>上传图片时指定高度以防止页面闪烁</li>\n<li>在safari等浏览器中webp图片自动降级至png</li>\n<li>ssr服务器不可用时自动降级至客户端渲染</li>\n<li>tree-shaking减少静态资源打包大小</li>\n<li>后台编辑支持本地草稿</li>\n<li>提供sitemap以增强SEO</li>\n</ul>\n<p>目前，首屏访问的后台平均响应速度为10毫秒，压测数据如下：</p>\n<p><img height=\"782\" style=\"width:500px\" src=\"https://oebegwmfv.qnssl.com/webp/20170725/150857_WX20170725-150855@2x.png\"></p>\n<h2><a href='#安卓和ios客户端---psnine' id='安卓和ios客户端---psnine' class='anchor'></a><a href='#安卓和ios客户端---psnine'>安卓和IOS客户端 - psnine</a></h2><p>基于Typescript、React Native、Redux写的Psnine第三方安卓客户端，已获得官方的第三方应用授权。</p>\n<p>Github: <a href=\"https://github.com/smallpath/psnine\">https://github.com/smallpath/psnine</a><br>Google Play: <a href=\"https://play.google.com/store/apps/details?id=com.psnine\">https://play.google.com/store/apps/details?id=com.psnine</a><br>Apple Store: <a href=\"https://itunes.apple.com/cn/app/psnine/id1279618123\">https://itunes.apple.com/cn/app/psnine/id1279618123</a>  </p>\n<p>psnine拥有超过100个组件，实现了网站的所有功能，客户端截图如下:<br><img height=\"640\"  style=\"width: 400px;display: inline-block;\" src=\"https://oebegwmfv.qnssl.com/webp/20170725/142131_1.jpg\">\n<img height=\"640\"  style=\"width: 400px;display: inline-block;\" src=\"https://oebegwmfv.qnssl.com/webp/20170725/142140_2.jpg\">\n<img height=\"534\"  style=\"width: 400px;display: inline-block;\"  src=\"https://oebegwmfv.qnssl.com/webp/20170725/142342_ezgif.com-resize%2520(1).gif\"></p>\n<h2><a href='#一键生成mg---memory' id='一键生成mg---memory' class='anchor'></a><a href='#一键生成mg---memory'>一键生成MG - memory</a></h2><p>视频后期软件After Effects的层存储脚本，提供动态预览特性，特别适合存储生成MG(Motion Graphics、运动图形)。</p>\n<p>Github: <a href=\"https://github.com/smallpath/memory\">https://github.com/smallpath/memory</a></p>\n<p>从2015年4月发布至今，历经8个版本的开发和维护，具有全面的功能和较高的稳定性，脚本界面截图如下：\n<img height=\"696\" src=\"https://oebegwmfv.qnssl.com/webp/20170620/145739_bandicam-2017-06-20-14-43-42-862_1.gif\"></p>\n<p>配合bodymovin、lottie，可以达到不错的多平台渲染效果</p>\n",
    "updatedAt": "2017-09-24 16:00:13",
    "createdAt": "2017-07-25 14:53:43",
    "allowComment": true,
    "toc": "<p><strong>文章目录</strong></p>\n<ul>\n<li><a href=\"#本博客---blog\">本博客 - blog</a></li>\n<li><a href=\"#安卓和ios客户端---psnine\">安卓和IOS客户端 - psnine</a></li>\n<li><a href=\"#一键生成mg---memory\">一键生成MG - memory</a></li>\n</ul>\n",
    "pathName": "opensource"
  },
  "tagPager": [],
  "tags": {
    "AE": 8,
    "静止系": 2,
    "Javascript": 6,
    "正则": 2,
    "部署": 1,
    "Node.js": 22,
    "git": 4,
    "babel": 4,
    "ES6 Module": 4,
    "CommonJS": 2,
    "单元测试": 2,
    "HTTP1.1": 1,
    "express.js": 5,
    "react": 5,
    "react native": 14,
    "性能调优": 6,
    "vue": 14,
    "mongoDB": 3,
    "redis": 1,
    "koa.js": 1,
    "服务端渲染": 11,
    "webpack": 7,
    "think.js": 1,
    "HTTP2": 2,
    "elastic search": 1,
    "算法": 1,
    "element-ui": 2,
    "npm": 1,
    "service worker": 1,
    "按需分块加载": 2,
    "消息队列": 1,
    "css module": 1,
    "开发工具": 1,
    "爬虫": 1,
    "spark": 1
  },
  "theme": {
    "name": "firekylin",
    "author": "github.com/75team/firekylin",
    "option": {
      "logoUrl": "/static/wow.png",
      "sidebarImageUrl": "/static/sidebar.webp",
      "sidebarMoveCss": "background 2s ease-in-out;",
      "sidebarFontColor": "#fff !important",
      "menu": [{
        "option": "home",
        "url": "/",
        "label": "首页"
      }, {
        "option": "archive",
        "url": "/archive",
        "label": "归档"
      }, {
        "option": "tags",
        "url": "/tag",
        "label": "标签"
      }, {
        "option": "user",
        "url": "/about",
        "label": "关于"
      }, {
        "option": "link",
        "url": "/link",
        "label": "友链"
      }, {
        "option": "stackoverflow",
        "url": "/opensource",
        "label": "开源"
      }]
    },
    "__v": 0
  },
  "progress": 100,
  "siteInfo": {
    "analyzeCode": {
      "key": "analyzeCode",
      "value": "UA-86299315-1"
    },
    "commentType": {
      "key": "commentType",
      "value": "disqus"
    },
    "commentName": {
      "key": "commentName",
      "value": "smallpath"
    },
    "faviconUrl": {
      "key": "faviconUrl",
      "value": "/static/favicon.ico"
    },
    "githubUrl": {
      "key": "githubUrl",
      "value": "smallpath"
    },
    "logoUrl": {
      "key": "logoUrl",
      "value": "/static/logo.webp"
    },
    "siteUrl": {
      "key": "siteUrl",
      "value": "https://smallpath.me"
    },
    "title": {
      "key": "title",
      "value": "Smallpath的小站"
    },
    "weiboUrl": {
      "key": "weiboUrl",
      "value": "http://weibo.com/smallpath"
    },
    "twoFactorAuth": {
      "key": "twoFactorAuth",
      "value": ""
    },
    "description": {
      "key": "description",
      "value": "Node.js/Front-End developer"
    },
    "keywords": {
      "key": "keywords",
      "value": "前端开发,Node.js,Vue,服务端渲染"
    },
    "miitbeian": {
      "key": "miitbeian",
      "value": ""
    },
    "numPerPage": {
      "key": "numPerPage",
      "value": ""
    }
  }
}