
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
# front 代理在 80 端口
    server{
        listen 80;                                      #如果是https, 则替换80为443
        #server_name *.domain.com domain.com;        #替换域名
        root project/www/Blog/front/dist;       #替换路径为构建出来的dist路径
        set $node_port 8360;
        set $ssr_port 8080;

        location ^~ / {
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_pass http://127.0.0.1:$ssr_port;
            proxy_redirect off;
        }

        location ^~ /proxyPrefix/ {
            rewrite ^/proxyPrefix/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_pass http://127.0.0.1:$node_port;
            proxy_redirect off;
        }

        location ^~ /dist/ {
            rewrite ^/dist/(.*) /$1 break;
            etag         on;
            expires      max;
        }

        location ^~ /static/ {
            etag         on;
            expires      max;
        }
    }
# admin 代理在 8090 端口
    server{
        listen 8090;                                     #如果是https, 则替换80为443
        #server_name admin.domain.com;                #替换域名
        root project/www/Blog/admin/dist;       #替换路径为构建出来的dist路径
        set $node_port 8360;

        index index.js index.html index.htm;

        location / {
            try_files $uri $uri/ @rewrites;
        }

        location @rewrites {
            rewrite ^(.*)$ / last;
        }

        location ^~ /proxyPrefix/ {
            rewrite ^/proxyPrefix/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_pass http://127.0.0.1:$node_port;
            proxy_redirect off;
        }

        location ^~ /static/ {
            etag         on;
            expires      max;
        }
    }
    # server {
    #     listen       80;
    #     server_name  localhost;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }

    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   html;
    #     }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     #location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     #}

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     #location ~ \.php$ {
    #     #    root           html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     #}

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     #location ~ /\.ht {
    #     #    deny  all;
    #     #}
    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
